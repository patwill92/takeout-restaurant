router.post('/reviewvalue', async (req, res) => {
    const toResolve = [];
    Review.create(req.body.value).then(response=>console.log(response)).catch(error=>console.log(error))
    res.json(req.body);
})
    router.get("/developmenttestmenu", async(req, res) => {
        const developmentResponse = await Menu.aggregate([{
            $lookup: {
                from: "reviews",
                localField: "_id",
                foreignField: "item",
                as: "reviewAsResultOfAggregate"
            }
        }, {
            $unwind: "$reviewAsResultOfAggregate"
        }, {
            $lookup: {
                from: "users",
                localField: "reviewAsResultOfAggregate.user",
                foreignField: "_id",
                as: "reviewAsResultOfAggregate.user"
            }
        }, {
            $group: {
                _id: "$_id",
                name: {$first:"$name"},
                price: {$first:"$price"},
                category: {$first:"$category"},
                description: {$first:"$description"},
                available: {$first:"$available"},
                image: {$first:"$image"},
                reviews: {
                    $push:{
                        _id:"$reviewAsResultOfAggregate._id",
                        user:{
                           $reduce: {
                              input: "$reviewAsResultOfAggregate.user",
                              initialValue: { id: "", name: "" },
                              in: {
                                 id: "$$this._id",
                                 name: "$$this.name" 
                              }
                           }
                        },
                        content:"$reviewAsResultOfAggregate.content",
                        rating:"$reviewAsResultOfAggregate.rating"
                    }
                },
                averageRating:{$avg:"$reviewAsResultOfAggregate.rating"}
            }
        }]);
        res.json(developmentResponse);
    })
    //{ $arrayElemAt: [ <array>, <idx> ] }
    router.get("/developmenttestreviews", async(req, res) => {

        const developmentResponse = await Review.aggregate([{
            $lookup: {
                from: "users",
                localField: "user",
                foreignField: "_id",
                as: "user"
            }
        }, {
            $unwind: "$user"
        }, {
            $group: {
                _id: "$item",
                reviews:{
                        $push: {
                        userName:"$user.name",
                        userId:"$user._id",
                        content:"$content",
                        rating:"$rating",
                        _id:"$_id"
                    }
                },
                result:{$first:"$active"}
            }
        }/*,{
            $group: {
                _id:"$result",
                results:{
                        $push: {
                        k:"$_id",
                        v:"$reviews"
                    }
                } 
            }
        },{$project:{
            finalResponse:{$arrayToObject:"$results"},
            _id:false
        }}*/])
        res.json(developmentResponse);
    })